#ifndef GMHJIT_DASM_INCLUDED
#define GMHJIT_DASM_INCLUDED

|.arch x64
|.actionlist gmh_acntionlist
|.section jitcode
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|
|.define TMP,  edx
|.define TMP2, ecx
|.define TMP3, r13
|.define CellSize, 4
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro
|
|.macro setStackp, value
|  mov  dword [rsp - 4], value
|.endmacro
|
|.macro incptr, ptraddr, size
|  mov64  TMP3,  ptraddr
|  add    qword  TMP3,  size
|  mov64  ptraddr, TMP
|.endmacro

// stack heap and label tables
typedef struct {
  int stack[4092];

  int heap[4092];

} context_t;

|.type Cxt, context_t, r15

#define MAX_NESTING 4092

#define cellsize sizeof(int)
#define sp_offsetb cxtos_1+s_offset*cellsize


int gmhjit(dasm_State *state, Instruction *opcode, int size) {

    int step;
    // struct member's offset
    int cxtos_1 = offsetof(context_t, stack);
    int cxtos_2 = offsetof(context_t, heap);

    unsigned int maxpc = 0;

    // stack top ptr offset
    int s_offset = 0;
    assert(sizeof(Instruction) == 4);

    // rdi save the value of first param
    |->start:
    |  push  PTR
    |  push  rbp
    |  mov   rbp,  rsp
#ifndef NDEBUG
    // save the stack top ptr in program stack
    |  setStackp s_offset
#endif
    |  mov   PTR,  rdi

    for(step = 0; step < size; step++, opcode++) {
        switch(*opcode) {
        // opcode t_C
        case PUSH: {
            // push next instruction to stack
            |  mov  dword [PTR+sp_offsetb], *(opcode + 1)
            // stack top pointer++
            s_offset++;
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            step++;
            opcode++;
            break;
        }
        case DUP: {
            // duplicate the top item on the stack
            |  mov TMP, [PTR+sp_offsetb]
            s_offset++;
            |  mov [PTR+sp_offsetb], TMP
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            break;
        }
        case COPY: {
            // Copy the nth item on the stack (given by the argument)
            // onto the top of the stack
            |  mov TMP, [PTR+cxtos_1+(*(opcode + 1))*cellsize]
            s_offset++;
            |  mov [PTR+sp_offsetb], TMP
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            break;
        }

        case SWAP: {
            // Swap the top two items on the stack
            |  mov TMP,  [PTR+sp_offsetb]
            |  mov TMP2, [PTR+sp_offsetb-cellsize]
            |  mov [PTR+sp_offsetb-cellsize],  TMP
            |  mov [PTR+sp_offsetb],  TMP2
            break;
        }

        case DISCARD: {
            // Discard the top item on the stack
            s_offset--;
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            break;
        }

        case SLIDE: {
            // Slide n items off the stack, keeping the top item
            |  mov TMP,  [PTR+sp_offsetb]
            s_offset = s_offset - *(opcode + 1) + 1;
            |  mov [PTR+sp_offsetb], TMP
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            step++;
            opcode++;
            break;
        }

        // Arithmetic
        case ADD: {
            // Add pop the first and second element from stack,
            // add them and push the result back
            |  mov TMP,  [PTR+sp_offsetb]
            s_offset--;
            |  add TMP,  [PTR+sp_offsetb]
            |  mov [PTR+sp_offsetb], TMP
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            break;
        }

        case SUB: {
            // Subtraction, pop the first and second element from stack, (second - first)
            // sub them and push the result back
            |  mov TMP,  [PTR+sp_offsetb]
            s_offset--;
            |  sub TMP,  [PTR+sp_offsetb]
            |  mov [PTR+sp_offsetb], TMP
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            break;
        }

        case MUL: {
            // Multiplication. pop the first and second element from stack, (second*first)
            // mul them and push the result back
            /// TODO

            break;
        }

        case DIV: {
            // Division. pop the first and second element from stack, (second/first)
            // div them and push the result back
            /// TODO
            break;
        }

        case MOD: {
            // Modulo. pop the first and second element from stack, (second mod first)
            // mod them and push the result back
            /// TODO

            break;
        }

        // Heap access
        case STORE: {
            // Store
            |  mov TMP,  [PTR+sp_offsetb]   // value
            |  mov TMP2, [PTR+sp_offsetb-cellsize]  // address
            s_offset -= 2;

            |  lea TMP3, [PTR+TMP2*CellSize+cxtos_2]
            |  mov [TMP3], TMP
#ifndef NDEBUG
            |  setStackp s_offset
#endif
            break;
        }

        case RETRIEVE: {
            // Retrieve
            |  mov TMP,  [PTR+sp_offsetb]   // address
            |  lea TMP3, [PTR+TMP*CellSize+cxtos_2]
            |  mov TMP,  [TMP3]
            |  mov [PTR+sp_offsetb], TMP
            break;
        }

        // Flow control
        case MARK: {
            printf("print opcode : %d  MARK:  %x\n", step, *(opcode));
            break;
        }
        // Not sure what the difference is between CALL and JUMP.
        // I think this CALL function should actually execute a function...
        case CALL: {
            printf("print opcode : %d  CALL:  %x\n", step, *(opcode));
            break;
        }

        case JUMP: {
            printf("print opcode : %d  JUMP:  %x\n", step, *(opcode));
            break;
        }

        case JUMPZERO: {
            printf("print opcode : %d  JUMPZERO:  %x\n", step, *(opcode));
            break;
        }

        case JUMPNEG: {
            printf("print opcode : %d  JUMPNEG:  %x\n", step, *(opcode));
            break;
        }

        case ENDSUB: {
            printf("print opcode : %d  ENDSUB:  %x\n", step, *(opcode));
            break;
        }

        case ENDPROG: {
            printf("print opcode : %d  ENDPROG:  %x\n", step, *(opcode));
            break;
            //return SUC_RETURN; // this is officially the end of the interpreter session
        }

        // I/O operations
        case WRITEC: {
            printf("print opcode : %d  WRITEC:  %x\n", step, *(opcode));
            break;
        }

        case WRITEN: {
            printf("print opcode : %d  WRITEN:  %x\n", step, *(opcode));
            break;
        }

        case READC: {
            printf("print opcode : %d  READC:  %x\n", step, *(opcode));
            break;
        }

        case READN: {
            printf("print opcode : %d  READN:  %x\n", step, *(opcode));
            break;
        }
        default: {
            printf("print opcode : %d  ERRER happend:  %x\n", step, *(opcode));
            break;
        }
        }
    }

    //return SUC_RETURN;
    |  mov  rax,  [rsp - 4]
    |  pop  rbp
    |  pop  PTR
    |  ret
    return SUC_RETURN;
}



#endif // GMHJIT_DASM_INCLUDED
